{
  "title": "原型/原型链的一些粗解",
  "description": "无论是开发时，还是在寻找资料时，在这个过程里总偶尔会碰上看到或使用到原型的时候，这里粗草的描述一下个人的见解。",
  "tags": [
    "原型",
    "原型链"
  ],
  "category": "开发",
  "created_at": "2019-06-07 16:45:44",
  "updated_at": "2019-06-07 16:45:44",
  "bodyContent": "> 原型链的讲解\n>> aaaaa\n>>> aaaaa\n>>>> aaaaa\n>>>>> aaaaa\n>>>>>> aaaaa\n>>>>>>> aaaaa\n### 原型：\n\n```\nimport Vue from 'vue';\nimport VueLazyload from 'vue-lazyload';\n\nVue.vue(VueLazyload,{\n  lazyComponent:true\n});\n```\n\n```\nfunction $initHighlight(block, cls) {\n  try {\n    if (cls.search(/\\bno\\-highlight\\b/) != -1)\n      return process(block, true, 0x0F) +\n             ` class=\"${cls}\"`;\n  } catch (e) {\n    /* handle exception */\n  }\n  for (var i = 0 / 2; i < classes.length; i++) {\n    if (checkCondition(classes[i]) === undefined)\n      console.log('undefined');\n  }\n\n  return (\n    <div>\n      <web-component>{block}</web-component>\n    </div>\n  )\n}\n\nexport  $initHighlight;\n```\n\n\n```\nconst Base = function () {\n    //不会被继承\n    this.child = '555';\n};\n\n//会被继承\nBase.prototype.child = 'bbbbb';\n\nconst Father = function () {\n    this.value = 'aaa';\n};\n\n(() => {\n    Father.prototype = Base.prototype;\n\n    const obj = new Father();\n    const baseObj = new Base();\n\n    console.log('Father.prototype = Base.prototype; --------------------------');\n    console.log(obj.child);\n    console.log(baseObj.child);\n})();\n\n(() => {\n    Father.prototype = new Base();\n\n    const obj = new Father();\n    const baseObj = new Base();\n\n    console.log('Father.prototype = new Base(); --------------------------');\n    console.log(obj.child);\n    console.log(baseObj.child);\n})();\n```",
  "bodyHtml": "<blockquote>\n<p>原型链的讲解</p>\n<blockquote>\n<p>aaaaa</p>\n<blockquote>\n<p>aaaaa</p>\n<blockquote>\n<p>aaaaa</p>\n<blockquote>\n<p>aaaaa</p>\n<blockquote>\n<p>aaaaa</p>\n<blockquote>\n<p>aaaaa</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n<h3>原型：</h3>\n<pre><code>import Vue from 'vue';\nimport VueLazyload from 'vue-lazyload';\n\nVue.vue(VueLazyload,{\n  lazyComponent:true\n});\n</code></pre>\n<pre><code>function $initHighlight(block, cls) {\n  try {\n    if (cls.search(/\\bno\\-highlight\\b/) != -1)\n      return process(block, true, 0x0F) +\n             ` class=&quot;${cls}&quot;`;\n  } catch (e) {\n    /* handle exception */\n  }\n  for (var i = 0 / 2; i &lt; classes.length; i++) {\n    if (checkCondition(classes[i]) === undefined)\n      console.log('undefined');\n  }\n\n  return (\n    &lt;div&gt;\n      &lt;web-component&gt;{block}&lt;/web-component&gt;\n    &lt;/div&gt;\n  )\n}\n\nexport  $initHighlight;\n</code></pre>\n<pre><code>const Base = function () {\n    //不会被继承\n    this.child = '555';\n};\n\n//会被继承\nBase.prototype.child = 'bbbbb';\n\nconst Father = function () {\n    this.value = 'aaa';\n};\n\n(() =&gt; {\n    Father.prototype = Base.prototype;\n\n    const obj = new Father();\n    const baseObj = new Base();\n\n    console.log('Father.prototype = Base.prototype; --------------------------');\n    console.log(obj.child);\n    console.log(baseObj.child);\n})();\n\n(() =&gt; {\n    Father.prototype = new Base();\n\n    const obj = new Father();\n    const baseObj = new Base();\n\n    console.log('Father.prototype = new Base(); --------------------------');\n    console.log(obj.child);\n    console.log(baseObj.child);\n})();\n</code></pre>\n",
  "dir": "static/posts/list",
  "base": "prototype.json",
  "ext": ".json",
  "sourceBase": "prototype.md",
  "sourceExt": ".md"
}